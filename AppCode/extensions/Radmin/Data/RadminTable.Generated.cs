// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/copilot-data

// Generator:   CSharpDataModelsGenerator
// App/Edition: Extension Sxc Tables/
// User:        2sic Web-Developer
using System.Collections.Generic;

namespace AppCode.Extensions.Radmin.Data
{
  // This is a generated class for RadminTable 
  // To extend/modify it, see instructions above.

  /// <summary>
  /// RadminTable data. <br/>
  /// Re-generate whenever you change the ContentType. <br/>
  /// <br/>
  /// Default properties such as `.Title` or `.Id` are provided in the base class. <br/>
  /// Most properties have a simple access, such as `.ColumnConfigs`. <br/>
  /// For other properties or uses, use methods such as
  /// .IsNotEmpty("FieldName"), .String("FieldName"), .Children(...), .Picture(...), .Html(...).
  /// </summary>
  public partial class RadminTable: AutoGenerated.ZAutoGenRadminTable
  {  }
}

namespace AppCode.Extensions.Radmin.Data.AutoGenerated
{
  /// <summary>
  /// Auto-Generated base class for Default.RadminTable in separate namespace and special name to avoid accidental use.
  /// </summary>
  public abstract class ZAutoGenRadminTable: Custom.Data.CustomItem
  {
    /// <summary>
    /// ColumnConfigs as list of RadminTableColumn.
    /// </summary>
    /// <remarks>
    /// Generated to return child-list child because field settings had Multi-Value=true. The type RadminTableColumn was specified in the field settings.
    /// </remarks>
    /// <returns>
    /// An IEnumerable of specified type, but can be empty.
    /// </returns>
    public IEnumerable<RadminTableColumn> ColumnConfigs => _columnConfigs ??= _item.Children<RadminTableColumn>("ColumnConfigs");
    private IEnumerable<RadminTableColumn> _columnConfigs;

    /// <summary>
    /// ColumnsAutoShowRemaining as bool. <br/>
    /// To get nullable use .Get("ColumnsAutoShowRemaining") as bool?;
    /// </summary>
    public bool ColumnsAutoShowRemaining => _item.Bool("ColumnsAutoShowRemaining");

    /// <summary>
    /// ColumnSort as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("ColumnSort", scrubHtml: true) etc.
    /// </summary>
    public string ColumnSort => _item.String("ColumnSort", fallback: "");

    /// <summary>
    /// DataContentType as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("DataContentType", scrubHtml: true) etc.
    /// </summary>
    public string DataContentType => _item.String("DataContentType", fallback: "");

    /// <summary>
    /// DataQuery as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("DataQuery", scrubHtml: true) etc.
    /// </summary>
    public string DataQuery => _item.String("DataQuery", fallback: "");

    /// <summary>
    /// EnableAdd as bool. <br/>
    /// To get nullable use .Get("EnableAdd") as bool?;
    /// </summary>
    public bool EnableAdd => _item.Bool("EnableAdd");

    /// <summary>
    /// EnableDelete as bool. <br/>
    /// To get nullable use .Get("EnableDelete") as bool?;
    /// </summary>
    public bool EnableDelete => _item.Bool("EnableDelete");

    /// <summary>
    /// EnableEdit as bool. <br/>
    /// To get nullable use .Get("EnableEdit") as bool?;
    /// </summary>
    public bool EnableEdit => _item.Bool("EnableEdit");

    /// <summary>
    /// PagingMode as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("PagingMode", scrubHtml: true) etc.
    /// </summary>
    public string PagingMode => _item.String("PagingMode", fallback: "");

    /// <summary>
    /// PagingSize as int. <br/>
    /// To get other types use methods such as .Decimal("PagingSize")
    /// </summary>
    public int PagingSize => _item.Int("PagingSize");

    /// <summary>
    /// SearchEnabled as bool. <br/>
    /// To get nullable use .Get("SearchEnabled") as bool?;
    /// </summary>
    public bool SearchEnabled => _item.Bool("SearchEnabled");

    /// <summary>
    /// Title as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Title", scrubHtml: true) etc.
    /// </summary>
    /// <remarks>
    /// This hides base property Title.
    /// To access original, convert using AsItem(...) or cast to ITypedItem.
    /// Consider renaming this field in the underlying content-type.
    /// </remarks>
    public new string Title => _item.String("Title", fallback: "");

    /// <summary>
    /// ViewId as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("ViewId", scrubHtml: true) etc.
    /// </summary>
    public string ViewId => _item.String("ViewId", fallback: "");
  }
}